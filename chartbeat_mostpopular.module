    <?php

    /**
     * Valid permissions for this module
     * @return array An array of valid permissions for the chartbeat_mostpopular module

     */

    function chartbeat_mostpopular_block_configure($delta = 0) {
        $form = array();
        if ($delta == 0) {
            $form['chartbeat_mostpopular_list_length'] = array(
                '#type' => 'textfield',
                '#title' => t('Enter the number of most popular items you want to display. Maximum is 25.'),
                '#default_value' => variable_get('chartbeat_mostpopular_list_length', 3),
                '#size' => 4,
                '#maxlength' => 4,
                '#required' => TRUE,

            );

            $form['chartbeat_mostpopular_apikey'] = array(
                '#type' => 'textfield',
                '#title' => t('Enter your Chartbeat API key here'),
                '#default_value' => variable_get('chartbeat_mostpopular_apikey'),
                '#size' => 60,
                '#maxlength' => 128,
                '#required' => TRUE,
            );

            $form['chartbeat_mostpopular_host'] = array(
                '#type' => 'textfield',
                '#title' => t('Enter your host name here'),
                '#default_value' => variable_get('chartbeat_mostpopular_host'),
                '#size' => 60,
                '#maxlength' => 128,
                '#required' => TRUE,
            );

            $form['chartbeat_mostpopular_debugging'] = array(

                '#type' => 'checkbox',
                '#default_value' => variable_get('chartbeat_mostpopular_debugging'),

                '#title' => t('Send debugging messages to dblog'),

            );
        }
        return $form;
    }

    function chartbeat_mostpopular_block_save($delta = 0, $edit = array()) {
        // This example comes from node.module.
        if ($delta == 0) {
            variable_set('chartbeat_mostpopular_list_length', t($edit['chartbeat_mostpopular_list_length']));
            variable_set('chartbeat_mostpopular_apikey', t($edit['chartbeat_mostpopular_apikey']));
            variable_set('chartbeat_mostpopular_host', t($edit['chartbeat_mostpopular_host']));
            variable_set('chartbeat_mostpopular_debugging', t($edit['chartbeat_mostpopular_debugging']));
        }
    }


    function chartbeat_mostpopular_permission() {
        return array(
            'administer' => array(
                'title' => t('Administer Chartbeat - Most Popular'),
                'description' => t('Perform administration tasks for Chartbeat - Most Popular.'),
            ),
        );
    }

    function chartbeat_mostpopular_block_info() {
            $blocks['chartbeat_most_popular'] = array(
                // info: The name of the block.
                'info' => t('Chartbeat - Most popular'),
            );
            return $blocks;
        }

    function chartbeat_mostpopular_block_view($delta=0) {
        $block=array();
        switch($delta) {
            case 0:
                $block['subject'] = t('Most Popular');
                $block['content'] = chartbeat_mostpopular_show_mostpopular();
                break;
        }
        return $block;
    }

    // * @return string - which contains HTML that outputs the Most Popular list for a block
    function chartbeat_mostpopular_show_mostpopular() {

        $apikey=variable_get('chartbeat_mostpopular_apikey');
        $limit=variable_get('chartbeat_mostpopular_list_length',3);
        $host=variable_get('chartbeat_mostpopular_host');
        $debug=variable_get('chartbeat_mostpopular_debugging');

        // build the output for the cache to get filled again
        $output='';

        // find current URL
        $current_url = (isset($_SERVER['HTTPS']) ? "https" : "http") . "://{$_SERVER['HTTP_HOST']}{$_SERVER['REQUEST_URI']}";



        // pull charts from Chartbeat
        $url = 'http://api.chartbeat.com/live/toppages/v3';
        $data = array(
        'apikey' => $apikey,
        'host' =>  $host,
        'limit' => $limit,
        );

        $full_url = url($url, array('query' => $data));

        $json=drupal_http_request($full_url);

        $jsonfeed=drupal_json_decode($json->data,true);

        if ($debug) {
           watchdog('chartbeat_mostpopular', '<pre>' . $json->data . '</pre>');
        }

        // Set parameters
        // $count = count($jsonfeed['pages']);
        $limit = 1;

        /// start building the HTML divs for the block
        $output .= '<ul>';

        // get current node
        if ($node = menu_get_object()) {
            // Get the nid
            $nid = $node->nid;
        }

        // go through the Chartbeat data and traverse the top 20 most popular items
        for ($i = 0; $i < $limit; $i++) {

            // now that you know the url path and page title
            $urlpath[$i] = $jsonfeed['pages'][$i]['path'];
            $pagetitle[$i] = $jsonfeed['pages'][$i]['title'];

            // extract the page title (and not the other section and site stuff)
            $exploded_title=explode("|",$pagetitle[$i]);

            // convert any possible HTML entities in the page title
            $current_title=html_entity_decode($exploded_title[0], ENT_QUOTES | ENT_IGNORE, "UTF-8");

            // build  campaign string for Google analytics
            // this string uses the current page URL as the source and the title of the link it's going to as the content
            $ga_string = '';
            //  $utm_source=$_SERVER[REQUEST_URI];
            $utm_medium="text-link";
            $utm_content = $current_title;
            $utm_campaign = "mostpopular";
            $ga_string ="?utm_medium=text-link&utm_content=".$utm_content."&utm_campaign=".$utm_campaign;

            // this is the url we will attach to every HREF in the link
            $proposed_url='http://www.' . $urlpath[$i].$ga_string;

            // take the chartbeat path and format it so that Drupal can recognize it as a local path
            $drupal_path = parse_url('http://www.' . $urlpath[$i]);
            $drupal_path = substr($drupal_path['path'],1);

            // call the function that returns pictures when sent a URL path
            //list($picture_path, $picture_title, $content_path) = get_picture($drupal_path);
            list($item_title) = get_title($drupal_path);
            //$current_image_html=theme('image', $picture_path, $picture_title, $picture_title,'',FALSE);
            //$href=l($current_image_html . $picture_title,$proposed_url,array('html'=>'true'));

            // <li><a><img><h3 class="title"></h3></a></li>
            $style_prefix='<li>';
            $style_postfix='</li>';

            if ($item_title=='') {
                $item_title="Home";
            }

            // using the proposed URL do checks on it to build the correct link
            $title='<h3 class="title">' . $item_title.'</h3>';
            $href=l($title,$proposed_url,array('html'=>'true'));
            $output .= $style_prefix.$href.$style_postfix;

        }
        $output .= '</ul>';


        return $output;
    }




    //  find the path for the URL sent into this function
    //  this function returns the path for the image in the field_news_image field, the node title and the node path
    function get_picture($url) {
        $node_path = drupal_lookup_path("source", $url);
        $node = menu_get_object("node", 1, $node_path);
        $title = $node->title;
        return array(
            $node->field_news_image['0']['filepath'],
            $title,
            $node_path,
        );
    }

    function get_title($url) {
        $node_path = drupal_lookup_path("source", $url);
        $node = menu_get_object("node", 1, $node_path);
        $title = $node->title;
        return array(
            $title
        );
    }


