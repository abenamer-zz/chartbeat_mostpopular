<?php

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the onthisdate module
 * test!
 */
function chartbeat_mostpopular_perm() {
    return array('access chartbeat_mostpopular');
}

function chartbeat_mostpopular_block_info() {
    $blocks['chartbeat_most_popular'] = array(
        // info: The name of the block.
        'info' => t('Chartbeat - Most popular'),
        // Block caching options (per role, per user, etc.)
        // DRUPAL_CACHE_PER_ROLE is the default.
        'cache' => DRUPAL_CACHE_PER_ROLE
    );
    return $blocks;
}

function chartbeat_mostpopular_block_view($delta=0) {
    $block=array();
    switch($delta) {
        case 0:
            $block['content'] = chartbeat_mostpopular_show_mostpopular();
            break;
    }
    return $block;
}

function chartbeat_test(){

    $output= "Dude! I'm here";
    return $output;
}



/**
 * @return string - which contains HTML that outputs the Most Popular list for a block
 */
function chartbeat_mostpopular_show_mostpopular() {
    dpm("I'm here");
    // find the cache and get it
    $cache_id= 'mostpopular';
    $cached_mostpopular= cache_get($cache_id, 'cache_chartbeat_mostpopular');

    // if the cache is not empty, then return the cached content

    if (isset($cached_mostpopular) && !empty($cached_mostpopular->data)) {
        // Return cached HTML
        $cached_content=$cached_mostpopular->data;
        return $cached_content;

    } else {

        // build the output for the cache to get filled again
        $output='';

        // find current URL
        $current_url = (isset($_SERVER['HTTPS']) ? "https" : "http") . "://{$_SERVER[HTTP_HOST]}{$_SERVER[REQUEST_URI]}";

        // pull charts from Chartbeat
        $json=file_get_contents('http://api.chartbeat.com/live/toppages/v3/?apikey=31d01e76c7782b47a116b59aa4a00c89&host=benamer.com&limit=25');
        $jsonfeed=json_decode($json,true);

        // Set parameters
        $count = 20;
        $limit = 1;

        /// start building the HTML divs for the block
        $output .= '<h2>Most Popular</h2>';
        $output .= '<ul>';

        // get current node
        if ($node = menu_get_object()) {
            // Get the nid
            $nid = $node->nid;
        }

        // go through the Chartbeat data and traverse the top 20 most popular items
        for ($i = 0; $i < $count; $i++) {
            // $limit regulates the number of items that will be generated by this block
            if ($limit > 4) {
                break;
            }

            // now that you know the url path and page title
            $urlpath[$i] = $jsonfeed["pages"][$i]["path"];
            $pagetitle[$i] = $jsonfeed["pages"][$i]["title"];

            // extract the page title (and not the other section and site stuff)
            $titles=explode("|",$pagetitle[$i]);
            // convert any possible HTML entities in the page title
            $current_title=html_entity_decode($titles[0], ENT_QUOTES | ENT_IGNORE, "UTF-8");

            // build  campaign string for Google analytics
            // this string uses the current page URL as the source and the title of the link it's going to as the content
            $ga_string = '';
//            $utm_source=$_SERVER[REQUEST_URI];
            $utm_medium="text-link";
            $utm_content = $current_title;
            $utm_campaign = "mostpopular";
            $ga_string = <<<EOT
?utm_medium=text-link&utm_content=$utm_content&utm_campaign=$utm_campaign
EOT;

            // this is the url we will attach to every HREF in the link
            $proposed_url='http://www.' . $urlpath[$i].$ga_string;

            // take the chartbeat path and format it so that Drupal can recognize it as a local path
            $drupal_path = parse_url('http://www.' . $urlpath[$i]);
            $drupal_path = substr($drupal_path['path'],1);

            // call the function that returns pictures when sent a URL path
            list($picture_path, $picture_title, $content_path) = get_picture($drupal_path);

            $current_image_html=theme('image', $picture_path, $picture_title, $picture_title,'',FALSE);
            $picture_title='<h3 class="title">' . $current_title.'</h3>';
            $href=l($current_image_html . $picture_title,$proposed_url,array('html'=>'true'));

            // <li><a><img><h3 class="title"></h3></a></li>
            $style_prefix='<li>';
            $style_postfix='</li>';

            // using the proposed URL do checks on it to build the correct link
            switch($proposed_url)
            {

                // if the proposed URL matches the current URL don't include in the list
                case($current_url):
                    break;

                case(preg_match('/\/news\/news-item/i',$urlpath[$i]) ? true : false ):
                    $output .= $style_prefix.$href.$style_postfix;
                    $limit++;
                    break;
                case(preg_match('/\/science\/science-news/i',$urlpath[$i]) ? true : false ):
                    $output .= $style_prefix.$href.$style_postfix;
                    $limit++;
                    break;
                case(preg_match('/\/advocacy\/advocacy-news/i',$urlpath[$i]) ? true : false ):
                    $output .= $style_prefix.$href.$style_postfix;
                    $limit++;
                    break;
                case(preg_match('/\/blog/i',$urlpath[$i]) ? true : false ):
                    $output .= $style_prefix.$href.$style_postfix;
                    $limit++;
                    break;
                case(preg_match('/\/blog\/walk/i',$urlpath[$i]) ? true : false ):
                    $output .= $style_prefix.$href.$style_postfix;
                    $limit++;
                    break;
            }
        }
        $output .= '</ul>';

        // if at least one match was found and the user is not logged in, go ahead and cache results
        if (($limit>0) && (!user_is_logged_in())) {
            // Cache time is set to one hour ahead
            $currentTimestamp = time();
            $in1hourstime = strtotime("+1 hours", $currentTimestamp);
            $cache_id = 'mostpopular';
            cache_set($cache_id, $output , 'cache_chartbeat_mostpopular', $in1hourstime);
        }
        dpm("output is".$output);
        return $output;

    }
}

//  find the path for the URL sent into this function
//  this function returns the path for the image in the field_news_image field, the node title and the node path
function get_picture($url) {
    $node_path = drupal_lookup_path("source", $url);
    $node = menu_get_object("node", 1, $node_path);
    $title = $node->title;
    return array(
        $node->field_news_image['0']['filepath'],
        $title,
        $node_path,
    );
}